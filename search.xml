<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux指令系统]]></title>
    <url>%2F2019%2F02%2F22%2FLinux%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[连接云服务器：1.连接服务器: ssh root@ip地址2.退出: logout Linux指令系统： 命令名称 [命名参数][命令对象] 一、日常操作1.cd指令 - 进入指定文件夹cd 目录 - 进入指定目录(也可以是文件夹对应的路径) ~相对路径 — 绝对路径 cd .. - 返回上层目录cd ~ - 回到根目录cd / - 进入系统根目录 ls指令 - 查看当前目录中的内容lsls -l/-lh - 查看详情ls -a - 隐藏文件也一起显示ls -R - 递归显示所有内容ls -S/-t - 按大小/时间排序 3.pwd指令 - 显示当前完整目录pwd 4.文件操作指令touch 文件名 - 新建文件cat 文件名 - 查看文件内容vim/vi 文件名 -打开文件 rm 文件名 - 删除文件rm - r 目录 - 删除文件夹 cp 文件名1 文件名2 - 将文件1中的内容拷贝到文件2中cp 文件1路径 文件2路径cp -r 文件名/目录名 目录2 - 将文件/目录拷贝到目录2中 mv 文件名1 文件名2 - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）mv 文件1路径 文件2路径 mv 文件名1 文件目录 - 将文件1移动到指定目录中注意: mv指令不能加-r来操作目录 (注意：cp/mv/rm 后面可以跟： -i询问 -f强制 -n不覆盖) mkdir 目录名 - 新建文件夹mkdir -p a/b/c - 按层级创建a,b,c三个文件夹mkdir -p a/{b,c}/{d,e,f} -同一层级常见多个 rmdir 目录名 - 删除指定空目录 7.history - 显示历史指令记录bashrc 配置显示时间：export HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “修改bashrc 后使其生效: source ~/.bashrc 或 . .bashrc 6.链接ln -s 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)ln 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个硬链接（了解） 注意: 源文件不存在的时候，软件无效，硬链接变成普通文件 8.快捷键ctr + f - 前进一个字符ctr + b - 后退一个字符ctr + a - 回到行首ctr + e - 回到行尾ctr + w - 向左删除一个单词ctr + u - 向左删除全部ctr + k - 向右删除全部ctr + y - 粘贴上次删除的内容ctr + l - 清屏 二、进程相关指令(用得较少)1.ps指令ps - 进程状态ps -aux 或者 ps ex - 查看进程ps -aux|grep 进程名 - 查看指定进程ps grep 进程ID 2.top指令top - 动态监控进程top -p PID1,PID2,…. - 动态监控指定进程 3.free指令free -单位 - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g, -k等！ 4.kill指令 kill 进程号 - 杀死指定的进程kill -1/-9/-15 - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程pkill 进程名 - 按名字处理进程killall 进程名 - 处理名字匹配的进程 uptime - 查看系统状态 三、权限管理1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多) users - 查看当前用户groups - 查看当前分组 groupadd 分组名 - 添加分组 useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名 - 创建一个用户添加到指定的分组中(在home创建相应的文件夹) usermod -G 分组列表 用户名 - 修改分组 passwd 用户名 - 修改密码 su 用户名 - 切换用户身份 sudo - 以管理员执行其他程序注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序 b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容 ## Allow root to run any commands anywhere root ALL=(ALL) ALL xiaoming ALL=(ALL) ALL (自己添加的，xiaoming是用户名) 2.chmodchmod 权限值 文件 - 修改指定文件的权限 chmod [a,u,g,o][+,-][r,w,x] 文件 - 为指定文件，给所有用户添加相应的权限 (a:所有，u:自己，g:同组，o:其他； +：添加， -: 取消； r:读，w:写，x:执行)chown 用户名 文件 - 改变文件所有者 (权限制是三组二进制值)self group otherrwx rwx rwx111 101 001 - 自己读写可执行，同一分组的只读可执行，其他的只可执行110 100 000 chmod 644 文件chmod 777 文件chmod 666 文件 三、日志管理1.cat指令cat 文件 - 查看文件内容 2.查看部分head -n N 文件 - 查看前N行内容tail -n N 文件 - 查看后N行内容 3.less [-N] 文件 - 按 j 向下 - 按 k 向上 - 按 f 向下翻屏 - 按 b 向上翻屏 - 按 g 到全文开头 - 按 G 到全文结尾 - 按 Q 退出 more [-N] 文件 - 和less差不多，这个是尽可能多，less是尽可能少的加载 4.处理sort - 排序 (cat 文件 |sort)uniq - 去重 (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用: |sort|uniqawk ‘{print $N}’ - 打印第N列的内容(netstat -natp|awk ‘{print $4}’) history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3 -获取历史指令中，使用最频繁的三个指令 5.重定向执行获取数据的指令 &gt; 文件 （将执行指定的结果存储到文件中 - 覆盖原文件中内容）执行获取数据的指令 &gt;&gt; 文件 (将执行指定的结果存储到文件中 - 在原文件的最后追加) 5.统计wc -c(字符)/-w(单词)/-l(行) 文件 6.查找grep 查看对象 目录/文件 参数​ 参数： -i 忽略大小写: grep you bb.txt -i -n 显示行标号： grep you bb.txt -n / grep you bb.txt -i -n -E 通过正则表达式匹配: grep -E ‘正则表达式’ 文件 注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B 支持：. +, *, ?, {N,M}, [], ^, $ -v 忽略字段: grep you bb.txt -v (在bb.txt中找不包含you的所有行) grep -E &apos;[0-9]+\.[0-9]+&apos; abb.txt -v -rn 递归查找目录，并打印行号 grep -r you ./ (在当前文件夹下中所有文件中去找包行’you’的行) —include=‘*.py’ 仅包含 py文件: grep -r you ./ --include=&apos;*.txt&apos; —exclude=‘*.js’ 不包含 js 文件: grep -r you ./ --exclude=&apos;*.c&apos; 例如： grep you bb.txt grep you bb.txt -i grep you bb.txt -i -n grep -E &apos;[0-9]+&apos; bb.txt find DIR -name ‘.xxx’ 找到目录下所有名字匹配的文件: find a1 -name ‘.txt’(在文件夹a1中找所有txt文件) 例：find ./ -size +20k -size -100k -name &apos;*.txt&apos; (找当前目录下大于20k并且小于100k的所有txt文件) which 指令 - 精确查找当前可执行的指令whereis 指令 - 查找所有匹配的命令 四、网络管理 ifconfig 查看网卡状态 netstat -natp - 查看网络连接状态netstat -natp|grep 端口号 - 查看指定端口的网络连接状态 ping 地址ping -i 时间 地址ping -c 次数 地址 telnet ip地址 端口 - 查看远程主机网络连接状况 dig 地址 - 查看DNS ** wget 地址 - 下载 五、使用包管理工具包管理工具：yum yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info：显示软件包的相关信息，例如yum info nginx。 源代码构建安装 wget 安装包的路径 -下载安装包 gunzip/tar 压缩包 - 解压、解归档 (设置安装路径) cd 安装包目录 执行: make &amp;&amp; make install -编译安装包程序 给可执行文件添加软连接到usr/bin目录下 -添加快捷方式 压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar 发送本地文件到远程（例如：Linux） -scp指令：scp 文件 root@ip地址：服务器上保存被发送文件的路径 从Linux上下载文件到本地scp root@ip地址：服务器上保存被发送文件的路径 本地路径 发送文件夹scp -r 文件夹 root@ip地址：服务器上保存被发送文件的路径 从Linux上下载文件夹到本地scp root@ip地址：服务器上文件夹的路径 本地路径]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>Linux指令系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim编辑器之神]]></title>
    <url>%2F2019%2F02%2F22%2Fvim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E%2F</url>
    <content type="text"><![CDATA[vim编辑器之神配置vimrc配置在shell中可以通过 vim ~/.vimrc 或者 vim /etc/vimrc 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）： 常用操作1.模式切换我们可以将vim分为命令模式、编辑模式和末行模式三种命令模式：进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区 (最末什么都没有) 末行模式：在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作 (最后有一个冒号) 编辑模式：在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–) ####2.保存和退出在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面w – 只保存(类似快捷键ctr+s)q – 退出（在编辑区的内容全部都保存的情况下才有效）wq – 保存并退出q! – 强制退出（不保存修改信息） ####3.光标操作以下光标操作都是在命令模式下输入的^(shift+6) – 移动到行首$(shift+4) – 移动到行尾G(shift+g) – 移动到文件末尾行号G – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行gg – 移动到文件开头 ####4.文本操作以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入dd – 删除光标所在的行数字dd – 从光标所在行开始往后面开始删，删除指定数量行内容:%d – 删除所有 yy – 复制光标所在的行数字yy – 从光标所在行开始复制指定行数的内容p – 将复制的内容粘贴到光标所在的位置u – 撤销ctr+r – 反撤销 :%!sort – 对内容排序(将一行内容看出一个字符串，然后按字符串大小进行排序) :/查找对象[/gice] – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找:/正则表达式[/参数] – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找注意：正则表达式除了表示次数的符号前需要加\，别的和python是一样的，例如：12:/\d\&#123;2&#125; -&gt; 查找两个数字:/a\+ -&gt; 查找a出现一次或者多次 :1,$s/被替换对象/替换内容/参数 – 将正则表达式匹配到的内容替换成指定内容注意：参数可以没有 - g: 全局匹配 - i: 忽略大小写 - c: 替换时需要提示 - e: 忽略错误 想要了解更多命令，可以点击下方链接https://github.com/jackfrued/Python-100-Days/blob/master/Day31-35/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>vim编辑器之神</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx服务器]]></title>
    <url>%2F2019%2F02%2F22%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1yum install nginx c) 运行nginxNginx不会自行启动。要运行Nginx 1systemctl start nginx nginx的运行命令: 12systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 d) 系统启动时启动Nginx 1systemctl enable nginx e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： 12345sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload 3.nginx目录共享配置a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yutingb) 打开 etc/nginx/nginx.conf 文件，设置server 1234567#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表root /home/yuting;location / &#123; autoindex on; autoindex_exact_size on; autoindex_localtime on;&#125; 除了可以共享文件，还可以自定义页面 12345#自定义服务器页面location / &#123; root /home/yuting; index index.html index.htm;&#125; 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>Nginx服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL配置]]></title>
    <url>%2F2019%2F02%2F22%2FMySQL%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[下载MySQL源安装包: wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装MySQL源: yum localinstall mysql57-community-release-el7-8.noarch.rpm 安装MySQL: yum install mysql-community-server 设置开启启动MySQL服务: systemctl enable mysqld 启动/重启MySQL服务：systemctl restart mysqld 查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log 更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法： 方法一：把密码设置复杂点（这是最直接的方法） 方法二：关闭mysql密码强度验证(validate_password) 编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off 编辑后重启mysql服务：systemctl restart mysqld 设置mysql能够远程访问:a. 登录进MySQL: mysql -uroot -p密码 b. 增加一个用户给予访问权限: grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option; c. 刷新权限：flush privileges;­]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>MySQL配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git的基本使用(指令)]]></title>
    <url>%2F2019%2F02%2F22%2Fgit%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[git的使用 - 版本控制 1.代码托管平台github.comgitee.comcoding.net 2.git命令基本指令git init —— 新建git仓库git add 文件/文件夹 —— 将文件添加到缓存区中git add -A —— 将工作区中的所有内容都提交 git stutas ——— 查看git状态git commit -m ‘提交信息’ —— 将缓存区中的内容全部提交到git本地仓库中git commit -a -m ‘清空’ git log ——- 查看提交日志 git reset - - hard HEAD—— 让工作目录中的内容和仓库中的内容保持一致git reset –hard HEAD^ —— 回到上一个版本git reset - - hard 版本号 —— 回到指定的版本 git checkout 文件名 —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态), 不能通过-A来恢复所有文件/ 1.没有本地仓库只有远程仓库(刚到公司，手头没有公司项目需要从公司的gitlab或者其他远程仓库上克隆到本地) 先cd到你打算放项目的目录下git clone - 将服务器上的项目(仓库)克隆 2.本地有项目，并且已经更新过版本。需要关联远程仓库 先在代码托管平台创建空的远程仓库(不要自动创建README) cd到本地仓库，执行： git remote add origin 仓库地址 //注意: 让本地已有的仓库和远程仓库关联的时候，远程仓库创建的时候不能添加README文件(创建空的仓库)git remote add origin 地址 关联远程仓库(只需要关联一次)git push [-u] origin master - 提交 (-u在第一次提交分之的时候才用) //如果创建远程仓库的时候仓库中有默认文件git pull —rebase origin master 分之管理： a.创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之 b.开发一般会自己创建一个develop分之，用来开发和测试 c.多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master, develop, 功能/人员分之 git branch [-a] - 查看分之git branch 分之名 - 创建分之git checkout 分支名 - 切换分之git checkout -b 分之名 - 切换并创建新的分之 git diff 分之1 分之2 - 查看两个分之之间的差异 git merge 分之名 - 让当前分之和指定分之进行合并 (让当前分之拥有指定分之的内容) 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 练习：创建一个开发分之(develop),然后在创建两个开发者分之zhangsan和lisi; 然后在zhangsan的分之上添加一个文件夹(aaa)，文件夹中有一个文件(文件不能为空) 在lisi的分之上添加一个图片 最后将zhangsan和lisi分之都合并到develop中；然后再将develop合并到master上 怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量) ssh地址的使用 配置全局的用户信息(windows) git global config user.name “yuting”git global config user.email “yuting@163.com” //git bash git config –global user.name ‘yuting’ git config –global user.email ‘yuting@163.com’]]></content>
      <tags>
        <tag>gitbash上的指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置python环境]]></title>
    <url>%2F2019%2F02%2F22%2F%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum install gcc[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz [root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip Python-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf Python-3.6.5.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd Python-3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# ./configure –prefix=/usr/local/python36 –enable-optimizations[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root@iZwz97tbgo9lkabnat2lo8Z ~]# make &amp;&amp; make install… 配置环境变量 …[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 –versionPython 3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 -m pip install -U pip[root@iZwz97tbgo9lkabnat2lo8Z ~]# pip3 –version]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>远程服务器上配置python环境</tag>
      </tags>
  </entry>
</search>
