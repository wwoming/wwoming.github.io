<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[flask入门]]></title>
    <url>%2F2019%2F03%2F04%2Fflask%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[flask环境使用virtualenv创建 安装：pip install virtualenv 创建虚拟环境：virtualenv –no-site-packages -p python.exe的绝对路径(也可以不写) 环境名 激活环境 win：cd 环境名/Scripts 执行activate Linux/Mac：source activate 退出环境：deactivate 使用pycharm创建 进入setting下面的project interpreter页面，选择框里面的show all，旁边有个’+’号，点击创建虚拟环境，不继承全局的包(site-packages) 进入setting下面的project interpreter页面，选择框里面的show all，旁边有个’+’号，如果通过dos命令已经创建了环境就选择Existing enviroment，在本地文件夹中选择环境 flask安装安装：先激活环境，再执行pip install flaskpip使用查询安装的库：pip list / pip freeze安装内容：pip install xxx同时安装多个文件：pip install -r requirement.txt (创建一个requirement.txt文件，在里面编辑要安装的文件，一个文件占一行)flask使用from flask import Flask创建app对象 app = Flask(name)@app.route(‘路由地址’)def 函数名(形参列表): 函数体 return 值 app.run()在Terminal窗口，虚拟环境下输入python 要执行的文件名.py 启动flask自带启动方式：app.run(host=’ip地址’, port=端口号, debug=True/False)使用flask-script库 pip install flask-script from flask-script import Manager manager = Manager(app) manager.run() 在Terminal启动命令：python xxx.py runserver -p -h -d 路由规则定义格式：&lt;转换器(类型)：参数名&gt;转换器 int：指定整型 string：指定字符串，默认类型 float：指定浮点类型 注意：string:name和是一样的请求与响应请求 获取参数 GET请求：获取参数：request.args[‘key’]、request.args.get(‘key’)(推荐 .get的方式) POST请求参数：request.form[‘key’]、request.form.get(‘key’)(推荐 .get的方式) 获取多个同样的key对应的value时，使用getlist(‘key’) 获取请求路径：request.path 请求cookies：request.cookies 获取上传文件：request.files取值：request.files.get(‘key’)、request.files[‘key’] 使用debug！！！ 获取debug里面request数据：先按下debug键，再在获取参数的代码行标红点，载通过postman传递参数，这样就可以操作debug控制台的Console和Debugger了！！！ 响应XMind: ZEN - Trial Version]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql语句概述]]></title>
    <url>%2F2019%2F02%2F27%2Fsql%E8%AF%AD%E5%8F%A5%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[数据库排名：Oracle(关系型)MySQL(关系型)SQLServer(关系型)PostgreSQL(关系型)MongoDB(非关系数据库)DB2(关系型)Redis(非关系数据库)ElasticSearch(非关系数据库) 行（记录）列(字段) 关系型数据库：想 SQL语句(结构化查询语言)DDL(数据定义语言)： create / drop / alterDML(数据操作语言 - Data Manipulation Language): insert / delete / update / selectDCL(数据控制语言): grant / revoke 1. DDL1. 创建数据库create database 数据库名字;create database 数据库名字 default charset utf8; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 创建数据库的时候指定数据库中的字符集编码方式create database if not exists 数据库名字; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 当指定数据库不存在的时候创建数据库use 数据库名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 切换数据库 2. 删除数据库drop database 数据库名字; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 删除数据库drop database if exists 数据库名字; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 当数据库存在的时候删除数据库 3. 创建表create table 表名(字段名1 字段类型1 约束1, 字段名2 字段类型2 约束2, …); &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;- 创建表create table if not exists 表名(字段名1 字段类型1 约束1, 字段名2 字段类型2 约束2, …); &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 当指定表不存在的时候创建表 4. 删除表drop table 表名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 删除指定表drop table if exists 表名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 删除已经存在的指定表 5. 修改表alter table 表名 add column 字段名 字段类型 约束; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 添加列alter table 表名 drop column 字段名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–删除列 2.DML1. 插入数据insert into 表名 values(值列表); &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 按表中字段的顺序依次给每一列赋值，添加一行记录insert into 表名(字段列表) values(值列表); &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 按字段列表顺序依次给每一列赋值，添加一行记录 2. 删除数据delete from 表名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 删除整张表(删除后表不存在了)truncate table 表名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 清空指定表中的所有数据(表还在)delete from 表名 where 条件语句; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 删除满足条件的行 3.更新数据update 表名 set 字段1=新值1,字段2=新值2,…; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–更新全表的指定字段（一般不用）update 表名 set 字段1=新值1,字段2=新值2,… where 条件; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–更新满足条件的行的指定字段 4.查询数据1.直接查询select * from 表名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 查询指定表的所有行所有列select 字段1,字段2,… from 表名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–查询表中所有行的指定列(投影) 2.列重命名select 字段1 as 新字段名1,字段2 as 新字段2,… from 表名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–查询表中所有行的指定列,并且给相应的字段重命名(这儿的as可以省略) 3.对查询结果重新赋值select 字段1,if(字段2, 值1,值2),… from 表名 where 条件; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–查询表中满足条件的行指定的列的数据 注意: 在字段选中查询字段的位置可以通过if(字段条件,值1,值2)的方式来通过条件修改获取到的值。通过case 字段 when 值 then 值1 else 值2 end的方式能达到同样的效果。if的方式只在MySQL有效 4.对列做运算select concat(字段1,字段2) from 表名 where 条件; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 将查询到的指定列合并在一起返回数据 5.模糊查询查询的时候通过like条件可以对数据库进行模糊查询 6.排序select from 表名 order by 字段名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–查询结果按指定字段的值升序排列select from 表名 order by 字段名 desc; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–查询结果按指定字段的值降序排列；如果把des换成asc就会变成升序注意: 排序的时候还可以通过加逗号指定多个排序关键字,例如:select * from td_student order bg gender asc, stuid desc -- 对查询结果先按性别升序排序，然后再按学号降序排序 7.限制select from 表名 limit 数量; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–只获取前指定数量条结果select from 表名 limit 数量1 offset 数量2; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–跳过前数量2条数，获取数量1条数据 8. 去重select distinct 字段 from 表名; sql条件语句: = &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 等于 &lt;&gt; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 不等于 &gt; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 大于 &lt; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 小于 = &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 大于等于 &lt;= &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 小于等于 and &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 逻辑与运算 or &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 逻辑或运算 in &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 集合运算; 例如： stuid in(1001， 1002); 选中stuid值是1001和1002的行 between 值1 and 值2 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 在值1和值2之间 like –通常配合通配符%和_一起使用 注意: 如果条件是判断某个字段是否为空，不能使用=null和&lt;&gt;null要用is null 和 is not null SQL数据类型:在 MySQL 中，有三种主要的类型：文本、数字和日期/时间类型。 一下是MySQL中常见的数据类型。MySQL数据类型 char(size) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 定长字符串 varchar(size) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符 text &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 存放最大长度为 65,535 个字符的字符串。 int(size) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; – -2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。 FLOAT(size,d) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 DOUBLE(size,d) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; –带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 bit &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 相当于bool类型，只有0和1两个值 date &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 日期。格式：YYYY-MM-DD, 支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’ DATETIME &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS TIMESTAMP &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS TIME &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 时间。格式：HH:MM:SS 注释：支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’ SQL约束:not null – 不能为空default 值 – 设置默认值primary key – 主键约束（主键是表中能够唯一标识一条记录的列）unique – 值唯一 5.约束管理1.添加约束/索引alter table 表名 add constraint 索引名 约束(字段名); &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–给指定字典添加指定约束 2.删除索引alter table 表名 drop index 索引名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–移除指定索引对应的约束 3.添加外键约束alter table 表名 add constraint 外键索引名 foreign key (字段1) references 表名2 (字段2) 4.删除外键约束alter table 表名 drop foreign key 外键索引名; 6.高级操作1.聚合max() – 最大值min() – 最小值sum() – 求和avg() – 求平均值count() – 求个数 2.分组group by(字段) – 按照指定字段的值进行分组注意: 如果是对分组后的结果进行筛选不能使用where而是使用having 3.连接内连接: inner join 表名 on 连接条件 左外连接就是把左表不满足连接条件的记录也查出来对应的记录补上null左外连接: left outer join 表名 on 连接条件右外连接: right outer join 表名 on 连接条件 4.添加索引create index 索引名 on 表(字段);alter table 表名 drop index from 索引名; 7.DCL - grant/revoke1.创建用户create user ‘用户名‘@’登录地址’ identified by ‘密码’; – 登录地址可以是localhost表示本机登录，也可以是指定的ip地址，还可以是%表示任意地址 2.授权grant 权限类型 on 数据库.对象 to 用户; – 为指定用户添加指定数据库的指定对象的指定权限revoke 权限类型 on 数据库.对象 from 用户; – 撤销/召回指定用户对指定数据库的指定对象的指定权限 权限类型: select(查看), insert(添加),delete(删除),update(更新),creat(创建),drop(删除), alter(更改), all privileges(所有权限) grant 权限类型 on 数据库.对象 to 用户 with grant option; –添加权限，并且可以将自己的权限再授权给别人 3.事务begin; –开启事务环境commit; –事务提交rollback; –事务回滚 8. pyMySQL 创建数据库连接连接对象 = pymysql.connect() - 返回连接对象连接对象.close() – 关闭连接 获得游标 对象游标对象 = 连接对象.cursor() 向数据库发送sql语句游标对象.execute(sql语句) - 返回执行结果]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL语言基础-三]]></title>
    <url>%2F2019%2F02%2F27%2FMySQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[下面文章中练习语法所用的表格没有放在文章中，如有需要，自己创建吧。 – ========================连接查询==========================– 1.连接查询：同时查询多个表中的数据– select * from 表名1,表名2,… where 连接条件;– 连接查询如果不加连接条件，结果是笛卡尔积：(a,b,c) (1,2,3) –&gt; (a1,a2,a3,b1,b2,b3,c1,c2,c3)– (余婷，骆昊，王海飞) (信工，马克思) –&gt; 笛卡尔积 – 查询每个老师对应的学院select teaname,collname from tb_teacher,tb_college where tb_teacher.collid=tb_college.collid;– 查询学生姓名对应的学科名的分数select stuname,couname,mark from tb_student,tb_course,tb_score where tb_score.stuid=tb_student.stuid and tb_score.couid=tb_course.couid; – 查询学生名对应的学生的平均成绩– select stuid,avg(mark) as avg_mark from tb_score group by (stuid);select stuname,avg_mark from tb_student,(select stuid,avg(mark) as avg_mark from tb_score group by (stuid)) as temp_twhere tb_student.stuid = temp_t.stuid; – 查询平均分高于80分的学生名字和对应的平均分数select stuname,avg_mark from tb_student,(select stuid,avg(mark) as avg_mark from tb_score group by (stuid) having avg(mark)&gt;80) as temp_twhere tb_student.stuid = temp_t.stuid; – 查询平均分高于80分的学生名字和对应的平均分数– 注意：如果连接查询的时候既有连接条件又有筛选条件，我们要把筛选条件写在连接条件后边select stuname,avg_mark from tb_student,(select stuid,avg(mark) as avg_mark from tb_score group by (stuid)) as temp_twhere tb_student.stuid = temp_t.stuid and avg_mark&gt;80; – 2.内连接– select * from 表1 inner join 表2 on 表2的连接条件 inner join 表3 on 表3的连接条件– 注意：中间表写在最前面(存在关联其他表外键的表)– 查询学生姓名对应的学科名的分数select stuname,couname,mark from tb_scoreinner join tb_student on tb_student.stuid = tb_score.stuidinner join tb_course on tb_course.couid = tb_score.couidwhere mark&lt;80; – 3.外连接– 外连接分为左外连接、右外连接和全连接，但是在MySQL中只支持左外连接和右外连接– 表1(左表) left/right/inner join 表2(右表)– 左外连接：将左表中对应字段的所有数据取出，然后再对应右表中要查字段的值，如果右表对应的值不存在结果就为null– 右外连接：将右表中对应字段的所有数据取出，然后再对应左表中要查字段的值，如果左表对应的值不存在结果就为null – 查询所有学生名对应的成绩select stuname,mark from tb_score inner join tb_student on tb_student.stuid = tb_score.stuid; select stuname,mark from tb_score RIGHT join tb_student on tb_student.stuid = tb_score.stuid;select stuname,mark from tb_score left join tb_student on tb_student.stuid = tb_score.stuid; – =========================字段索引============================– 字段的索引就相当于一个目录，作用是为了能够快速的对这个字段进行查找– 添加索引的好处是可以大大的提高查询效率；缺点是：1.会消耗额外的存储空间，2.会让添加和删除的效率降低– 建议：1.索引不能滥用 2.如果项目中针对某个字段的查询很频繁，建议加个对应的索引– explain：获取执行计划 – ========个人理解：添加字段索引就相当于给那个被添加了索引的字段下面的每条记录都创建了一对一的快捷方式========================= explain select from tb_student where stuid=10;explain select from tb_student where stuname=’关羽’; – 添加索引：create index 索引名称 on 表名 (字段名); – 给指定的字段添加索引create index index_stuname on tb_student (stuname); – 给名字加索引create index index_stuname1 on tb_student (stuname(1)); – 按姓加索引 – 删除索引alter table tb_student drop index index_stuname; – ===============DCL===================================– 1.创建用户– create user ‘用户名‘@’登录地址’– 登录地址：(限制用户能够登录MySQL的主机地址)，ip地址(指定地址)，localhost(数据库本机)，%(任何位置)create user ‘张三‘@’%’ identified by ‘zhuming’; – 删除用户：drop user 用户名;drop user ‘张三’; – 2.授权– grant 权限类型 on 数据库.对象 to 用户名;grant select on localdata.tb_student to ‘张三’;grant update on localdata.tb_student to ‘张三’;grant all privileges on localdata. to ‘张三’; – 添加所以有权限grant all privileges on localdata. to ‘张三’ with grant option; – 添加所有权限，并且能够将自己的权限再授权给其他用户 – 3.召回权限revoke delete on localdata. from ‘张三’;revoke drop on localdata. from ‘张三’;revoke all privileges on localdata.* from ‘张三’;revoke select on localdata.tb_student from ‘张三’;revoke update on localdata.tb_student from ‘张三’; – 4.事务– 完成一个任务需要执行多条sql，但是要求这多个操作当中只要有一个操作失败，整个任务就失败，数据全部还原；所有的操作都成功，整个任务才成功的时候就使用事务 – 开启事务环境begin;update tb_student set stuname=’马超’ where stuname=’马’;update tb_student set birth=’2000-1-1’ where stuname=’王大锤’; – 提交事务(只有begin到commit之间的sql都执行成功，才会执行commit；否则执行rollback)commit;– 事务回滚(放弃begin到commit之间执行成功的所有的sql语句的结果)rollback;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL语言基础(二)]]></title>
    <url>%2F2019%2F02%2F26%2FMySQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[文章前面部分主要是语法基础，配合着文章后面创建的表进行练习。 – =================================sql基础补充===============================– 1.条件语句的写法– 在SQL中可以通过 where 条件语句来对操作对象进行筛选 - 筛选– a. 比较运算符： =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=– 注意: 判断一个字段的值是否为空不用使用=和&lt;&gt;, 而是使用is null 和 is not nullSELECT addr FROM t_student;SELECT stuname FROM t_student WHERE addr is NULL; – 判断是否为NULL（空）SELECT stuname FROM t_student WHERE addr=’’; – 判断是否是空串– b. 逻辑运算符: and, or, not– c. where 字段名 between 值1 and 值2 – 筛选指定的字段的值在值1和值2之间SELECT stuname,birth FROM t_student WHERE birth BETWEEN ‘1990-1-1’ AND ‘1999-12-31’;– d. where 字段名 in 集合 – 筛选出字段值是集合中的元素;(集合是使用括号括起来里面多个值)SELECT * FROM t_student WHERE stuname in (‘小花’, ‘小明’, ‘路飞’);– e. like操作 – 2.数据类型– varchar(size): 不定长字符串，size决定的是最大长度– char(size): 定长字符– text: 不限长度(最大是255个字符)– int/tinyint(-128~127)– FLOAT(size,d)/DOUBLE(size,d) - 这儿的size和d的值都有约束效果– bit: 只有0和1两个值– date/datetime/time: 值可以是时间函数的结果，也可以时间字符串；计算或者是比较的时候内部是按时间处理的UPDATE t_student SET tel=’1367819230’;ALTER TABLE t_student ADD COLUMN intro VARCHAR(10);SELECT * FROM t_student; – 3.去重，对查询结果去重SELECT DISTINCT addr FROM t_student; – ========================添加约束=========================– 1.创建表的时候添加约束CREATE TABLE if not EXISTS t_college(collid int,collname VARCHAR(20) NOT NULL, – 创建表的时候添加约束website VARCHAR(1024),intro VARCHAR(200),PRIMARY KEY(collid)); – 2.通过添加约束索引的方式添加约束– a.添加约束– alter table 表名 add constraint 索引名 约束 (字段名);– 说明: 索引名 - 自己随便命名，用来指向当前添加的约束； 约束 - 需要添加的约束(支持唯一约束、主键约束和外键约束) ALTER TABLE t_college ADD CONSTRAINT con_website UNIQUE (website);– 给t_college表中的website添加unique约束，约束索引为con_website – b.删除约束– alter table 表名 drop index 约束索引;ALTER TABLE t_college DROP index con_website; – ====================外键和E.R图================– 1.什么是外键：表中的某个字段的值是根据其他表中主键的值来确定的。那么这个字段就是外键– 1.1 多对一的外键的添加： 将外键添加到多的一方对应的表中– 一对一的外键的添加：将外键随便添加到哪一方，同时添加值唯一约束– 多对多的外键的添加：关系型数据库中，两张表是没法实现多对多的关系，需要一个中间表(中间表有两个外键分别参照多对多的两个表的主键) – 1.2 怎么添加外键： – a.添加外键对应的字段alter TABLE tb_student add COLUMN collid int; – b.给设计好的外键对应的字段添加外键约束– alter table 表1 add constraint 索引名 foreign key (字段1) references 表2 (字段2);– - 将表1中的字段1设置为外键，并且让这个外键的值参照表2中的字段2ALTER TABLE tb_student ADD CONSTRAINT fk_collid_stuFOREIGN KEY (collid)REFERENCES tb_college (collid); – c. 删除外键约束– alter table 表名 drop foreign key 外键索引名; - 可以删除外键约束，但是外键索引还存在；需要额外的把索引删掉– 注意: 删除外键约束的时候直接删除约束的索引无效，必须先将约束删掉，然后再删除索引.ALTER TABLE tb_student DROP FOREIGN KEY fk_collid_stu;ALTER TABLE tb_student DROP INDEX fk_collid_stu; – d. 多对多的外键约束 – 添加学生的外键约束alter table tb_score add CONSTRAINT fk_stuid_score FOREIGN key (stuid) REFERENCES tb_student (stuid); – 添加课程的外键约束ALTER TABLE tb_score ADD CONSTRAINT fk_couid_score FOREIGN KEY (couid) REFERENCES tb_course (couid); – ====================查询的高级操作=============================================================================– 1.聚合：max()/min()/sum()/avg()/count()– SELECT 聚合函数(字段) from 表名 where 条件; – 按条件查询表中指定的字段，然后将查询结果做相应的聚合运算。聚合运算的结果才是最后结果SELECT mark from tb_score; – 获取tb_score表中的所有分数值SELECT max(mark) as maxmark from tb_score; – 获取tb_score表中所有分数的最大值SELECT avg(mark) as averagemark from tb_score where scoreid&gt;=15; – 计算平均值的时候如果参与运算的对象的值为null，那么这个数据不会参与计算SELECT sum(mark) as summark from tb_score;SELECT min(mark) as minmark from tb_score;SELECT count(mark) as count from tb_score where mark&gt;90; – 2.分组– SELECT 字段聚合操作 from 表名 where 条件 GROUP BY (字段2);– 将指定表中满足条件的记录按照字段2的值进行分组(值是一样的在一个分组里面)，然后再将每个分组作为整体进行指定的字段聚合操作– 求每个学生的平均成绩SELECT stuid,avg(mark) from tb_score WHERE scoreid&lt;=10 GROUP by (stuid);– 注意：a. 字段操作的位置除了分组字段不用聚合，其他字段都必须聚合 b. 分组的时候where要放到分组前对需要分组的数据进行筛选 – having - 分组的时候，在分组后用having代替where来对分组后的数据进行筛选– 获取平均分数大于90分的学生的idSELECT stuid,avg(mark) from tb_score GROUP BY (stuid) HAVING avg(mark)&gt;90; – 3.子查询：将一个查询操作的结果作为另外一个查询的数据源– 在tb_score表中获取成绩大于90分的学生的idSELECT stuid from tb_score where mark&gt;90 and stuid is not null; – 获取成绩大于90分的学生的名字SELECT stuname from tb_student where stuid in (SELECT stuid from tb_score where mark&gt;90 and stuid is not null); – 将一个查询的结果作为查询对象提供给另一个查询。但是第一个查询结果需要重命名SELECT stuid,mark from tb_score where mark&gt;90 and stuid is not null;SELECT mark from (SELECT stuid,mark from tb_score where mark&gt;90 and stuid is not null) as t2; – 学生表与学院表多对一– 先给学生表添加外键对应的字段，然后添加外键约束alter table tb_student add COLUMN collid int;alter table tb_student add CONSTRAINT fk_collid_stuforeign key (collid)REFERENCES tb_college (collid); – 老师表和学院表多对一– 先给老师表添加外键对应的字段，然后添加外键约束alter table tb_teacher add COLUMN collid int;alter table tb_teacher add CONSTRAINT fk_collid_teach foreign key (collid) REFERENCES tb_college (collid); – 学科表和老师表多对一– 先给学科表添加外键对应的字段，然后添加外键约束alter table tb_course add COLUMN teaid int;alter table tb_course add CONSTRAINT fk_teaid_course FOREIGN key (teaid) REFERENCES tb_teacher (teaid); – ===================分数表====================== create table if not EXISTS tb_score(scoreid int not NULL auto_increment,mark float(4,1),stuid int COMMENT ‘学生外键’,couid INT COMMENT ‘课程外键’,PRIMARY key(scoreid)); insert into tb_score(mark) VALUES(90),(78),(98),(78),(67.8),(98.7),(99.9),(78.6),(67),(87),(98),(76),(56.5); – =============1.学生表===============CREATE TABLE IF NOT EXISTS tb_student(stuid int not NULL auto_increment,stuname VARCHAR(20) not NULL,gender bit default 0,tel CHAR(11) not NULL,birth date DEFAULT ‘2019-10-21’,addr VARCHAR(100),PRIMARY key(stuid)); insert INTO tb_student(stuname,tel,addr) VALUES(‘王大锤’, ‘38291092854’, ‘四川’),(‘关羽’, ‘19828485849’, ‘北京’),(‘张飞’, ‘18734848483’, ‘滕州’),(‘赵云’, ‘18347330275’, ‘常山’),(‘魏延’, ‘18375834859’, ‘云南’),(‘姜维’, ‘17928349574’, ‘缅甸’),(‘马超’, ‘17801020384’, ‘甘肃’); – ===============2.课程表================CREATE TABLE IF NOT EXISTS tb_course(couid int NOT NULL auto_increment,couname VARCHAR(20) NOT NULL,startdate date NOT NULL DEFAULT ‘2019-10-21’,intro VARCHAR(200),credit int NOT NULL,PRIMARY key(couid)); – =================3.学院表====================CREATE TABLE IF NOT EXISTS tb_college(collid int auto_increment,website VARCHAR(200) UNIQUE,collname VARCHAR(50),PRIMARY KEY(collid)); – =================4.老师表====================CREATE TABLE IF NOT EXISTS tb_teacher(teaid int NOT NULL auto_increment,teaname VARCHAR(20) NOT NULL,teaage INT,tel char(11),PRIMARY KEY(teaid));]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL语言基础(一)]]></title>
    <url>%2F2019%2F02%2F26%2FMySQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[– SQL语法– DDL(数据定义语言)– DML(数据操作语言)– DCL(数据控制语言)– 注意：SQL中大小写不敏感（大写和小写是一样的）；每条SQL语句必须以分号结束 – 一.DDL - 主要提供数据库和表的创建、删除和修改– 0.删除数据库： drop database 数据库名；drop database school;drop database if EXISTS school; – 如果指定的数据库存在就删除数据库 – 1.创建数据库：create database 数据库名；CREATE DATABASE school; – 直接创建指定数据库CREATE DATABASE if not EXISTS school; – 当指定数据库不存在的时候才创建数据库create database if not EXISTS school2 default charset utf8; – 创建数据库的时候设置字符集编码方式为utf8,让数据库支持中文数据的存储 – 2.使用/切换数据库：use 数据库名；use school2; – 3.新建表：create table if not exists 表名(字段名1 类型1 约束1, 字段名2 类型2 约束2, …);– 注意： a.表名一般需要加前缀’t’或者’tb’ b.字段用来确定表中要存储哪些数据，字段名随便命名但是不能是关键字 c.数据类型必须是MySQL支持的数据类型– 常用数据类型：int-整数, char(size)-定长字符串, varchar(size)-不定长字符串, text-字符串, bit-布尔, date-日期create TABLE t_student(stuid INT, stuname varchar(20), gender bit, birth date); – create table if not exists 表名(字段名1 类型1 约束1, 字段名2 类型2 约束2, …);– 常用的约束：not null - 不能为空，default - 设置默认值，unique - 值唯一，primary key - 主键约束– 主键约束：主键指的是表中能够唯一标识一条记录的字段(通过主键值能够找到表中唯一一行记录)– 注意：一个字段可以添加多个约束，多个约束之间用空格隔开– 注意：auto_increment只针对主键有效，并且主键的类型是int(整型)；create TABLE t_student(stuid INT not null auto_increment,stuname varchar(20) not null,gender bit DEFAULT 0,birth date,PRIMARY KEY(stuid) – 设置stuid为当前表的主键，(设置一个字段为主键，其实间接的约束了这个字段的值是唯一的)); – 4.删除表：DROP TABLE if EXISTS 表名; - 删除后表不存在了DROP TABLE if EXISTS t_student;– 清空表中的记录：truncate table 表名; - 删除后表还在，只是记录没有了truncate table t_student; – 5.修改表：– 5.1 添加字段：alter table 表名 add column 字段名 字段类型 约束;alter table t_student add column score float(5,2) default 0;– 5.2 删除字段： alter table 表名 drop column 字段名;alter table t_student drop column gender; – 二、DML(数据操作语言) - 主要针对数据库中数据的增、删、改、查– 1.增(添加数据/记录)– 1.1 插入数据/记录：insert into 表名 values(值1，值2，值3，…) - 依次给指定表中的字段赋值INSERT into t_student values(2,’张三’,1,’2019-2-25’,80); – 1.2 插入数据/记录：insert into 表名(字段名1，字段名2，…) values(值1，值2，…) - 以指定的顺序给指定的字段赋值insert into t_student(stuname,birth) values(‘小李’,date(now()));insert into t_student(stuname,birth) values(‘xiao’,’2099-2-2’),(‘背影’,’1989-2-23’),(‘ming’,’1999-2-2’);insert into t_student values(1,’小七’,0,date(NOW()),70)insert into t_student(stuname,birth) VALUES(‘小八’,’1777-2-4’),(‘九儿’,’1995-4-23’),(‘冬狮郎’,’1989-9-12’); – 值的问题：sql中数字对应的值直接写，字符串需要使用单/双引号引起来，bit类型的值只有0或者1，时间可以是内容是满足时间格式的字符串也可以是通过时间函数获取的值– 时间函数：now() - 当前时间 date(now()) - 获取当前日期 year(now()) - 当前年 month(now()) - 当前月 … – 2.删(删除数据/记录)– delete from 表名; - 删除指定表中所有记录DELETE FROM t_student; – delete from 表名 where 条件语句; - 删除满足条件的记录– SQL中的条件语句：=(判断是否相等)，&lt;&gt;(不等于，和python中的!=功能一样)，&gt;,&lt;,&gt;=,&lt;=delete FROM t_student where stuid=7; – 删除t_student表中stuid的值等于3的记录delete from t_student where stuname=’ming’; – 删除t_student表中stuname值等于’ming’的记录delete from t_student where stuid&lt;100; – 删除t_student表中sutid的值小于100的记录delete from t_student where score&gt;10;delete from t_student where score&lt;&gt;0; – 3.改(修改数据/记录)– update 表名 set 字段1=新值2, 字段2=新值2; - 将指定表中所有行的指定列/字段的值赋值为新值update t_student set birth=’2000-2-22’, gender=1; – update 表名 set 字段1=新值2, 字段2=新值2, … where 条件语句; - 将表中满足条件的行的指定字段的值赋值为新值update t_student set birth=date(NOW()), gender=0 where stuid&lt;=12; – 通配符%：代表任意个数的任意字符(包括0个或多个)update t_student set birth=’1777-7-7’ where stuname like ‘小%’; – 修改表中stuname是以’小’开头的行对应的birth的值update t_student set birth=’2025-1-1’ where stuname like ‘%m%’;– 通配符_：表示一个任意字符update t_student set birth=’3333-2-2’ where stuname like ‘小_’; – 修改表中stuname只有两个字符，并且第一个字符是’小’对应的行的birth的值update t_student set birth=’111-2-2’ where stuname like ‘小__%’;– 注意：通配符只针对字符串有效 – 4.查(获取数据)– 4.1直接查询– select from 表名; - 获取指定表中所有的行和所有的列(所有数据)SELECT from t_student; – select 字段名1，字段名2，… from 表名; - 获取指定表中所有行指定的列SELECT stuname,stuid from t_student; – select from 表名 where 条件; - 获取指定表中所有满足条件的行所有列的数据select from t_student where stuid&gt;12; – 4.2 列重命名– select 字段1 as 新字段1, 字段2 as 新字段2, 字段3, … from 表名;– 注意：这儿的as可以省略select stuid as ‘学号’, stuname, gender as ‘性别’ from t_student; – 对查询结果中的stuid和gender字段进行重命名 – 4.3 对查询结果重新赋值(一般针对布尔数据)– select if(字段相关的条件语句，值1，值2) from 表名; - 查询指定的字段，并且判断字段对应的值是0还是1，如果是1结果为值1，否则为值2– 注意：这儿的if的用法是MySQL专有的– MySQL写法：if(字段，新值1，新值2)select stuname, if(gender,’男’,’女’) as ‘性别’ from t_student;– 通用写法：case 字段 when 值 then 新值1 else 新值2 endselect case gender when 1 then ‘男’ else ‘女’ end as ‘性别’ from t_student; – 4.4 对列进行合并– select concat(字段1，字段2，…) from 表名;select concat(stuname,’ : ‘, stuid,’ : ‘, birth) as ‘name_id_birth’ from t_student;– 注意：数字和字符串数据可以合并，bit类型的数据不可以合并– select concat(stuname,’ : ‘,gender) as ‘name_gender’ from t_student; – 4.5 模糊查询 - 查询的时候通过like条件来指定查询对象– sql中支持逻辑运算符and(逻辑与运算)和or(逻辑或运算)，not(逻辑非)select * from t_student where stuname like ‘%m%’ and not stuid&gt;=13; – 4.6 排序(先按之前的任何语法进行查询再排序)– select from 表名 order by 字段; - 对查询结果按照指定字段的值进行升序排序select from t_student order by gender; – 对查询结果按照性别升序排序select from t_student order by stuid ASC; – 对查询结果按照学号升序排序select from t_student order by stuid DESC; – 对查询结果按照学号降序排序 – 排序的时候可以通过在order by的后面加多个字段，进行连排。排序的时候前面的字段的优先级高些select * from t_student order by gender, stuid DESC; – 先按性别进行升序排序，再按学号进行降序排序 – 4.7 限制– select from 表名 limit N; - 获取查询结果的前N条记录SELECT from t_student LIMIT 3; – 获取查询结果的前三条记录 – SELECT from 表名 limit M offset N; - 对查询结果跳过前N条数据，取M条数据select from t_student limit 3 offset 4; – 跳过前4条数据，然后取3条数据]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux指令系统]]></title>
    <url>%2F2019%2F02%2F22%2FLinux%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[连接云服务器：1.连接服务器: ssh root@ip地址2.退出: logoutLinux指令系统： 命令名称 [命名参数][命令对象] 一、日常操作1.cd指令 - 进入指定文件夹cd 目录 - 进入指定目录(也可以是文件夹对应的路径) ~相对路径 — 绝对路径 cd .. - 返回上层目录cd ~ - 回到根目录cd / - 进入系统根目录 ls指令 - 查看当前目录中的内容lsls -l/-lh - 查看详情ls -a - 隐藏文件也一起显示ls -R - 递归显示所有内容ls -S/-t - 按大小/时间排序 3.pwd指令 - 显示当前完整目录pwd 4.文件操作指令touch 文件名 - 新建文件cat 文件名 - 查看文件内容vim/vi 文件名 -打开文件 rm 文件名 - 删除文件rm - r 目录 - 删除文件夹 cp 文件名1 文件名2 - 将文件1中的内容拷贝到文件2中cp 文件1路径 文件2路径cp -r 文件名/目录名 目录2 - 将文件/目录拷贝到目录2中 mv 文件名1 文件名2 - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）mv 文件1路径 文件2路径 mv 文件名1 文件目录 - 将文件1移动到指定目录中注意: mv指令不能加-r来操作目录 (注意：cp/mv/rm 后面可以跟： -i询问 -f强制 -n不覆盖) mkdir 目录名 - 新建文件夹mkdir -p a/b/c - 按层级创建a,b,c三个文件夹mkdir -p a/{b,c}/{d,e,f} -同一层级创建多个 rmdir 目录名 - 删除指定空目录 7.history - 显示历史指令记录bashrc 配置显示时间：export HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “修改bashrc 后使其生效: source ~/.bashrc 或 . .bashrc 6.链接ln -s 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)ln 源路径 目标路径 - 给源路径对应的文件在目标路径下创建一个硬链接（了解） 注意: 源文件不存在的时候，软连接无效，硬链接变成普通文件 8.快捷键ctr + f - 前进一个字符ctr + b - 后退一个字符ctr + a - 回到行首ctr + e - 回到行尾ctr + w - 向左删除一个单词ctr + u - 向左删除全部ctr + k - 向右删除全部ctr + y - 粘贴上次删除的内容ctr + l - 清屏 二、进程相关指令(用得较少)1.ps指令ps - 进程状态ps -aux 或者 ps ex - 查看进程ps -aux|grep 进程名 - 查看指定进程ps grep 进程ID 2.top指令top - 动态监控进程top -p PID1,PID2,…. - 动态监控指定进程 3.free指令free -单位 - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g, -k等！ 4.kill指令 kill 进程号 - 杀死指定的进程kill -1/-9/-15 - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程pkill 进程名 - 按名字处理进程killall 进程名 - 处理名字匹配的进程 uptime - 查看系统状态 三、权限管理1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多) users - 查看当前用户groups - 查看当前分组 groupadd 分组名 - 添加分组 useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名 - 创建一个用户添加到指定的分组中(在home创建相应的文件夹) usermod -G 分组列表 用户名 - 修改分组 passwd 用户名 - 修改密码 su 用户名 - 切换用户身份 sudo - 以管理员执行其他程序注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序 b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容 ## Allow root to run any commands anywhere root ALL=(ALL) ALL xiaoming ALL=(ALL) ALL (自己添加的，xiaoming是用户名) 2.chmodchmod 权限值 文件 - 修改指定文件的权限 chmod [a,u,g,o][+,-][r,w,x] 文件 - 为指定文件，给所有用户添加相应的权限 (a:所有，u:自己，g:同组，o:其他； +：添加， -: 取消； r:读，w:写，x:执行)chown 用户名 文件 - 改变文件所有者 (权限制是三组二进制值)self group otherrwx rwx rwx111 101 001 - 自己读写可执行，同一分组的只读可执行，其他的只可执行110 100 000 chmod 644 文件chmod 777 文件chmod 666 文件 三、日志管理1.cat指令cat 文件 - 查看文件内容 2.查看部分head -n N 文件 - 查看前N行内容tail -n N 文件 - 查看后N行内容 3.less [-N] 文件 - 按 j 向下 - 按 k 向上 - 按 f 向下翻屏 - 按 b 向上翻屏 - 按 g 到全文开头 - 按 G 到全文结尾 - 按 Q 退出 more [-N] 文件 - 和less差不多，这个是尽可能多，less是尽可能少的加载 4.处理sort - 排序 (cat 文件 |sort)uniq - 去重 (cat 文件 |uniq) - 只会去重相邻的重复是数据，一般结合sort一起使用: |sort|uniqawk ‘{print $N}’ - 打印第N列的内容(netstat -natp|awk ‘{print $4,$3})’ history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3 -获取历史指令中，使用最频繁的三个指令 5.重定向执行获取数据的指令 &gt; 文件 （将执行指定的结果存储到文件中 - 覆盖原文件中内容）执行获取数据的指令 &gt;&gt; 文件 (将执行指定的结果存储到文件中 - 在原文件的最后追加) 5.统计wc -c(字符)/-w(单词)/-l(行) 文件 6.查找grep 查看对象 目录/文件 参数​ 参数： -i 忽略大小写: grep you bb.txt -i -n 显示行标号： grep you bb.txt -n / grep you bb.txt -i -n -E 通过正则表达式匹配: grep -E ‘正则表达式’ 文件 注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B 支持：. +, *, ?, {N,M}, [], ^, $ -v 忽略字段: grep you bb.txt -v (在bb.txt中找不包含you的所有行) grep -E &apos;[0-9]+\.[0-9]+&apos; abb.txt -v -rn 递归查找目录，并打印行号 grep -r you ./ (在当前文件夹下中所有文件中去找包行’you’的行) —include=‘*.py’ 仅包含 py文件: grep -r you ./ --include=&apos;*.txt&apos; —exclude=‘*.js’ 不包含 js 文件: grep -r you ./ --exclude=&apos;*.c&apos; 例如： grep you bb.txt grep you bb.txt -i grep you bb.txt -i -n grep -E &apos;[0-9]+&apos; bb.txt find DIR -name ‘.xxx’ 找到目录下所有名字匹配的文件: find a1 -name ‘.txt’(在文件夹a1中找所有txt文件) 例：find ./ -size +20k -size -100k -name &apos;*.txt&apos; (找当前目录下大于20k并且小于100k的所有txt文件) which 指令 - 精确查找当前可执行的指令whereis 指令 - 查找所有匹配的命令 四、网络管理 ifconfig 查看网卡状态 netstat -natp - 查看网络连接状态netstat -natp|grep 端口号 - 查看指定端口的网络连接状态 ping 地址ping -i 时间 地址ping -c 次数 地址 telnet ip地址 端口 - 查看远程主机网络连接状况 dig 地址 - 查看DNS ** wget 地址 - 下载 五、使用包管理工具包管理工具：yum yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info：显示软件包的相关信息，例如yum info nginx。 源代码构建安装 wget 安装包的路径 -下载安装包 gunzip/tar 压缩包 - 解压、解归档 (设置安装路径) cd 安装包目录 执行: make &amp;&amp; make install -编译安装包程序 给可执行文件添加软连接到usr/bin目录下 -添加快捷方式 压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar 发送本地文件到远程（例如：Linux） -scp指令：scp 文件 root@ip地址：服务器上保存被发送文件的路径 从Linux上下载文件到本地scp root@ip地址：服务器上保存被发送文件的路径 本地路径 发送文件夹scp -r 文件夹 root@ip地址：服务器上保存被发送文件的路径 从Linux上下载文件夹到本地scp -r root@ip地址：服务器上文件夹的路径 本地路径]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>Linux指令系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim编辑器之神]]></title>
    <url>%2F2019%2F02%2F22%2Fvim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E%2F</url>
    <content type="text"><![CDATA[vim编辑器之神配置vimrc配置在shell中可以通过 vim ~/.vimrc 或者 vim /etc/vimrc 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）： 常用操作1.模式切换我们可以将vim分为命令模式、编辑模式和末行模式三种命令模式：进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区 (最末什么都没有) 末行模式：在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作 (最后有一个冒号) 编辑模式：在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–) ####2.保存和退出在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面w – 只保存(类似快捷键ctr+s)q – 退出（在编辑区的内容全部都保存的情况下才有效）wq – 保存并退出q! – 强制退出（不保存修改信息） ####3.光标操作以下光标操作都是在命令模式下输入的^(shift+6) – 移动到行首$(shift+4) – 移动到行尾G(shift+g) – 移动到文件末尾行号G – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行gg – 移动到文件开头 ####4.文本操作以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入dd – 删除光标所在的行数字dd – 从光标所在行开始往后面开始删，删除指定数量行内容:%d – 删除所有 yy – 复制光标所在的行数字yy – 从光标所在行开始复制指定行数的内容p – 将复制的内容粘贴到光标所在的位置u – 撤销ctr+r – 反撤销 :%!sort – 对内容排序(将一行内容看出一个字符串，然后按字符串大小进行排序) :/查找对象[/gice] – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找:/正则表达式[/参数] – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找注意：正则表达式除了表示次数的符号前需要加\，别的和python是一样的，例如：12:/\d\&#123;2&#125; -&gt; 查找两个数字:/a\+ -&gt; 查找a出现一次或者多次 :1,$s/被替换对象/替换内容/参数 – 将正则表达式匹配到的内容替换成指定内容注意：参数可以没有 - g: 全局匹配 - i: 忽略大小写 - c: 替换时需要提示 - e: 忽略错误 想要了解更多命令，可以点击下方链接https://github.com/jackfrued/Python-100-Days/blob/master/Day31-35/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>vim编辑器之神</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx服务器]]></title>
    <url>%2F2019%2F02%2F22%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1yum install nginx c) 运行nginxNginx不会自行启动。要运行Nginx 1systemctl start nginx nginx的运行命令: 12systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 d) 系统启动时启动Nginx 1systemctl enable nginx e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： 12345sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload 3.nginx目录共享配置a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yutingb) 打开 etc/nginx/nginx.conf 文件，设置server 1234567#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表root /home/yuting;location / &#123; autoindex on; autoindex_exact_size on; autoindex_localtime on;&#125; 除了可以共享文件，还可以自定义页面 12345#自定义服务器页面location / &#123; root /home/yuting; index index.html index.htm;&#125; 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>Nginx服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL配置]]></title>
    <url>%2F2019%2F02%2F22%2FMySQL%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[下载MySQL源安装包: wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装MySQL源: yum localinstall mysql57-community-release-el7-8.noarch.rpm 安装MySQL: yum install mysql-community-server 设置开启启动MySQL服务: systemctl enable mysqld 启动/重启MySQL服务：systemctl restart mysqld 查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log 更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法： 方法一：把密码设置复杂点（这是最直接的方法） 方法二：关闭mysql密码强度验证(validate_password) 编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off 编辑后重启mysql服务：systemctl restart mysqld 设置mysql能够远程访问:a. 登录进MySQL: mysql -uroot -p密码 b. 增加一个用户给予访问权限: grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option; c. 刷新权限：flush privileges;­]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL配置</tag>
        <tag>环境和服务器配置教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置python环境]]></title>
    <url>%2F2019%2F02%2F22%2F%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum install gcc[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz [root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip Python-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf Python-3.6.5.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd Python-3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# ./configure –prefix=/usr/local/python36 –enable-optimizations[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root@iZwz97tbgo9lkabnat2lo8Z ~]# make &amp;&amp; make install… 配置环境变量 …[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 –versionPython 3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 -m pip install -U pip[root@iZwz97tbgo9lkabnat2lo8Z ~]# pip3 –version]]></content>
      <categories>
        <category>环境和服务器配置教程</category>
      </categories>
      <tags>
        <tag>远程服务器上配置python环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git的基本使用(指令)]]></title>
    <url>%2F2019%2F02%2F22%2Fgit%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[git的使用 - 版本控制 1.代码托管平台github.comgitee.comcoding.net 2.git命令基本指令git init —— 新建git仓库git add 文件/文件夹 —— 将文件添加到缓存区中git add -A —— 将工作区中的所有内容都提交 git stutas ——— 查看git状态git commit -m ‘提交信息’ —— 将缓存区中的内容全部提交到git本地仓库中git commit -a -m ‘清空’ git log ——- 查看提交日志 git reset - - hard HEAD—— 让工作目录中的内容和仓库中的内容保持一致git reset –hard HEAD^ —— 回到上一个版本git reset - - hard 版本号 —— 回到指定的版本 git checkout 文件名 —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态), 不能通过-A来恢复所有文件/ 1.没有本地仓库只有远程仓库(刚到公司，手头没有公司项目需要从公司的gitlab或者其他远程仓库上克隆到本地) 先cd到你打算放项目的目录下git clone - 将服务器上的项目(仓库)克隆 2.本地有项目，并且已经更新过版本。需要关联远程仓库 先在代码托管平台创建空的远程仓库(不要自动创建README) cd到本地仓库，执行： git remote add origin 仓库地址 //注意: 让本地已有的仓库和远程仓库关联的时候，远程仓库创建的时候不能添加README文件(创建空的仓库)git remote add origin 地址 关联远程仓库(只需要关联一次)git push [-u] origin master - 提交 (-u在第一次提交分之的时候才用) //如果创建远程仓库的时候仓库中有默认文件git pull —rebase origin master 分之管理： a.创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之 b.开发一般会自己创建一个develop分之，用来开发和测试 c.多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master, develop, 功能/人员分之 git branch [-a] - 查看分之git branch 分之名 - 创建分之git checkout 分支名 - 切换分之git checkout -b 分之名 - 切换并创建新的分之 git diff 分之1 分之2 - 查看两个分之之间的差异 git merge 分之名 - 让当前分之和指定分之进行合并 (让当前分之拥有指定分之的内容) 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 练习：创建一个开发分之(develop),然后在创建两个开发者分之zhangsan和lisi; 然后在zhangsan的分之上添加一个文件夹(aaa)，文件夹中有一个文件(文件不能为空) 在lisi的分之上添加一个图片 最后将zhangsan和lisi分之都合并到develop中；然后再将develop合并到master上 怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量) ssh地址的使用 配置全局的用户信息(windows) git global config user.name “yuting”git global config user.email “yuting@163.com” //git bash git config –global user.name ‘yuting’ git config –global user.email ‘yuting@163.com’]]></content>
      <tags>
        <tag>gitbash上的指令</tag>
      </tags>
  </entry>
</search>
